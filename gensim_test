import gensim, logging, os
import nltk
import numpy as np
import csv

#FLAGS
isSanityTest = False #flag to test the validity of a created model
isLoopResults = False #get results for all models available
isCreateSimilarityGraph = True
isCreateModels = False
isReadModelsFromDisk = False
isWriteWordsOfInterest = True
is_use_woi_files = True


#Global Variables
model = None
model_dir = '/Users/hayden/workspace/EmotViz/vocabularies/word2vec/'
words_of_interest_files_folder = '/Users/hayden/workspace/EmotViz/words_of_interst_by_models/'
words_of_interest = ['interest', 'anticipation', 'vigilance',
                             'optimism',
                             'serenity', 'joy', 'ecstasy',
                             'acceptance', 'trust', 'admiration',
                             'submission',
                             'apprehension', 'fear', 'terror',
                             'awe',
                             'distraction', 'surprise', 'amazement',
                             'disapproval',
                             'pensive', 'sadness', 'grief',
                             'remorse',
                             'boredom', 'disgust', 'loathing',
                             'contempt',
                             'annoyance', 'anger', 'rage',
                             'aggressiveness']


def write_dict_to_file(this_dict, modelname, write_directory = words_of_interest_files_folder):
    filename = modelname + '.npy'
    this_file = os.path.join(write_directory, modelname)
    np.save(this_file, this_dict)

    #to read the data back:






# sentences = [['first', 'sentence'], ['second', 'sentence']]
# # train word2vec on the two sentences
# model = gensim.models.Word2Vec(sentences, min_count=1)
#
# model.save('/tmp/mymodel')
# new_model = gensim.models.Word2Vec.load('/tmp/mymodel')

def look_up(words_of_interest, model): #todo if some word of interest does not appear in a model, break gracefully
    if (model == None):
        print('Error, there is no model loaded')
        exit()
    wv_interest = {}
    for i in range(len(words_of_interest)-1):
        wv_interest[words_of_interest[i]] = model[words_of_interest]
    if(isWriteWordsOfInterest):
        write_dict_to_file(wv_interest, write_directory= words_of_interest_files_folder)
    return wv_interest

#create similarity graph
"""
Accepts a dictionary with string names and 1-D np.array values and creates a 2-d Similarity graph for it
"""
def createSimilarityGraph(dict, viz_dims=2):

    #if current model is none, error and break
    #loop through all interesting words an get word vectors for each
    this_wv_interest = look_up(words_of_interest, model)

    print('Now visualizing the words')


    np.random.seed(22342) #setting the random seed for consistancy across tests



    raise NotImplementedError


def make_models():
    for filename in os.listdir(model_dir): #get results for each of the models I have
        if filename.endswith('.txt'):
            this_model_file = os.path.join(model_dir, filename)
            model = gensim.models.KeyedVectors.load_word2vec_format(
                this_model_file, binary=False)
            print(model.similarity('woman', 'man'))
            #wv_interesting = look_up(words_of_interest)
            #print(wv_interesting['pensive'])

            #for each of the above words find the word that is most similar to in our list
            for this_word in words_of_interest:
                #create a list of words exlucding the words
                temp_list = [word for word in words_of_interest if word is not this_word]
                this_similar_word = model.most_similar_to_given(this_word, temp_list)
                print(this_word + ' was most similar to', this_similar_word)

            #do a 2-D projection of the word vectors for all words and map them

            #go into genism and see how model.most_similar(positive=['koenig', 'frau'], negative=['mann']) etc. is impl



            #translate that into findings from my interesting list (or i can use the most interesting list as list sim
            if (not isLoopResults):
                print('Not looping through all models I have! ')
                print('Model created using: ' + filename)
                break


def test_write2Dic():

    #creating two nd arrays
    mu_vec1 = np.array([0, 0, 0])
    cov_mat1 = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    class1_sample = np.random.multivariate_normal(mu_vec1, cov_mat1, 20).T
    assert class1_sample.shape == (3, 20), "The matrix has not the dimensions 3x20"

    mu_vec2 = np.array([1, 1, 1])
    cov_mat2 = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    class2_sample = np.random.multivariate_normal(mu_vec2, cov_mat2, 20).T
    assert class2_sample.shape == (3, 20), "The matrix has not the dimensions 3x20"

    new_dict = {}
    new_dict['first one'] = class1_sample
    new_dict['second one'] = class2_sample
    write_dict_to_file(new_dict, 'testfile', write_directory= words_of_interest_files_folder)

    this_file = os.path.join(words_of_interest_files_folder, 'testfile')
    this_file = this_file + '.npy'

    dict_back = np.load(this_file)
    print(dict_back.item().keys())
    print(dict_back.item()['first one'])

def main():
    #flow begin

    #test_write2Dic()

    #test readin
    #exit()



    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
    if(isCreateModels):
        make_models()


    if isCreateSimilarityGraph:
        if is_use_woi_files:
            # read words of interest projections from files
            for this_file in os.listdir(words_of_interest_files_folder):
                # read each file and parse into a dict
                this_file = os.path.join(words_of_interest_files_folder, this_file)
                if this_file.endswith('.npy'):
                    this_words_of_interest = np.load(this_file).item()
                    createSimilarityGraph(this_words_of_interest)
                    break
        else:
            if model != None:
                this_words_of_interest = words_of_interest(model)#read from the model
                createSimilarityGraph(this_words_of_interest)



if __name__ == "__main__":
    main()





#model = gensim.models.KeyedVectors.load_word2vec_format('/Users/hayden/workspace/word2vec/word2vec-mac/vectors.bin', binary=True)




#extract vectors for the words
#wv_interest = model['office']
#populate word vectors of interest

